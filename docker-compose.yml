version: "3.3"
services:
  adminer:
    restart: always
    image: adminer
    ports:
      - "1111:8080"
      - "1443:1443"
    networks:
      - kong-network
    links:
      - db:db
      - influxdb:influxdb

  db:
    image: mysql:5.7
    ports:
      - "32000:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db:/docker-entrypoint-initdb.d/:rw
      - mysql_db:/var/lib/mysql
    networks:
      - admin-db-network
      - auth-db-network
      - service-db-network
      - adapter-db-network

  auth:
    image: bogdannutu/cloud1x2bet_auth
    ports:
      - "7778:5000"
    depends_on:
      - db
    networks:
      - kong-network
      - auth-db-network

  service:
    image: bogdannutu/cloud1x2bet_service
    ports:
      - "7777:5000"
    depends_on:
      - db
    networks:
      - kong-network
      - service-db-network

  admin:
    image: bogdannutu/cloud1x2bet_admin
    ports:
      - "5000:5000"
    depends_on:
      - db
    networks:
      - kong-network
      - admin-db-network
      - admin-adapter-network

  influxdb:
    image: influxdb
    ports:
      - "8086:8086"
    networks:
      - adapter-influxdb-network
      - grafana-influxdb-network

  adapter:
    image: bogdannutu/cloud1x2bet_adapter
    ports:
      - 4000:80
    depends_on:
      - db
      - influxdb
    networks:
      - adapter-db-network
      - adapter-influxdb-network
      - admin-adapter-network

  kong_db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-network
    volumes:
      - postgres_db:/var/lib/postgresql/data

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    depends_on:
      - kong_db
    links:
      - adminer:adminer
      - admin:admin
      - auth:auth
      - service:service
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kong_db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong_db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    networks:
      - kong-network
    deploy:
      restart_policy:
        condition: on-failure

  konga:
    image: pantsel/konga:next
    restart: always
    links:
      - kong:kong
    environment:
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      NODE_ENV: production
    depends_on:
      - kong_db
    networks:
      - kong-network
    ports:
      - "1337:1337"
    secrets:
      - kong_postgres_password

  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap"
    secrets:
      - kong_postgres_password
    restart: on-failure
    environment:
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - kong-network
    links:
      - kong_db
    depends_on:
      - kong_db

  grafana:
    image: grafana/grafana
    ports:
      - 80:3000
    networks:
      - grafana-influxdb-network
    volumes:
      - ./grafana.db:/var/lib/grafana/grafana.db

volumes:
  mysql_db:
  postgres_db:

networks:
  kong-network:
  admin-db-network:
  auth-db-network:
  service-db-network:
  adapter-db-network:
  adapter-influxdb-network:
  grafana-influxdb-network:
  admin-adapter-network:

secrets:
  kong_postgres_password:
    file: './secrets/postgres-admin-password.txt'
